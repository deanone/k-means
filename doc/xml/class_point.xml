<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="class_point" kind="class" language="C++" prot="public">
    <compoundname>Point</compoundname>
    <includes refid="_point_8h" local="no">Point.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_point_1a1db9dc500c5972dfb3e5c2c58e8dea8e" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Point::ID</definition>
        <argsstring></argsstring>
        <name>ID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Point.h" line="8" column="1" bodyfile="Point.h" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_point_1aab1a36388e8cf732ac39bfc3be14decf" prot="private" static="no" mutable="no">
        <type><ref refid="_data_types_8h_1a82f6bc76e1c7a0f51bf3e95ad5d3c590" kindref="member">DoubleVector</ref></type>
        <definition>DoubleVector Point::v</definition>
        <argsstring></argsstring>
        <name>v</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Point.h" line="9" column="1" bodyfile="Point.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_point_1ad92f2337b839a94ce97dcdb439b4325a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Point::Point</definition>
        <argsstring>()</argsstring>
        <name>Point</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Point.h" line="15" column="1" bodyfile="Point.cpp" bodystart="3" bodyend="5"/>
      </memberdef>
      <memberdef kind="function" id="class_point_1a395fa04b4ec126b66fc053f829a30cc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Point::~Point</definition>
        <argsstring>()</argsstring>
        <name>~Point</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Point.h" line="20" column="1" bodyfile="Point.cpp" bodystart="7" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="class_point_1aac952f18d9bf4cac6e71e487bf0a6485" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Point::setID</definition>
        <argsstring>(int _ID)</argsstring>
        <name>setID</name>
        <param>
          <type>int</type>
          <declname>_ID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the ID of the <ref refid="class_point" kindref="compound">Point</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_ID</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the <ref refid="class_point" kindref="compound">Point</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Point.h" line="26" column="1" bodyfile="Point.cpp" bodystart="15" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="class_point_1a70f96664692429af8c591eac51e65faa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Point::getID</definition>
        <argsstring>() const</argsstring>
        <name>getID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the ID of the <ref refid="class_point" kindref="compound">Point</ref>. <simplesect kind="return"><para>the ID of the <ref refid="class_point" kindref="compound">Point</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Point.h" line="32" column="1" bodyfile="Point.cpp" bodystart="20" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="class_point_1adc21fb4804add5777f2a1774b024fea7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Point::addValue</definition>
        <argsstring>(double val)</argsstring>
        <name>addValue</name>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a value to the internal vector of the <ref refid="class_point" kindref="compound">Point</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to be added. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Point.h" line="38" column="1" bodyfile="Point.cpp" bodystart="25" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="class_point_1a8b0689db3397d2822086d7c9c8388e52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Point::size</definition>
        <argsstring>()</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the size of the internal vector of the <ref refid="class_point" kindref="compound">Point</ref>. <simplesect kind="return"><para>the size of the internal vector. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Point.h" line="44" column="1" bodyfile="Point.cpp" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="class_point_1a1a104867c565a737ae4b090d17de94f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Point::changeValue</definition>
        <argsstring>(int index, double val)</argsstring>
        <name>changeValue</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Updates a specific value of the internal vector of the <ref refid="class_point" kindref="compound">Point</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the value to be updated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para>new value. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Point.h" line="51" column="1" bodyfile="Point.cpp" bodystart="35" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="class_point_1a9dbaa711812c795591f242761ae49260" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_data_types_8h_1a82f6bc76e1c7a0f51bf3e95ad5d3c590" kindref="member">DoubleVector</ref> *</type>
        <definition>DoubleVector * Point::values</definition>
        <argsstring>()</argsstring>
        <name>values</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer to the internal vector of the <ref refid="class_point" kindref="compound">Point</ref>. <simplesect kind="return"><para>a pointer to the internal vector of the <ref refid="class_point" kindref="compound">Point</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Point.h" line="57" column="1" bodyfile="Point.cpp" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="class_point_1a84ede377561c9e12fd4624ce79dee52e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_point" kindref="compound">Point</ref></type>
        <definition>Point Point::operator+</definition>
        <argsstring>(const Point &amp;p)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="class_point" kindref="compound">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>operator overloading function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>a reference to the rhs point. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a new point as the sum. </para></simplesect>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Point.h" line="64" column="1" bodyfile="Point.cpp" bodystart="48" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="class_point_1a1abb26c14e145a8b4782a30b821dd19e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_point" kindref="compound">Point</ref></type>
        <definition>Point Point::operator=</definition>
        <argsstring>(const Point &amp;p)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_point" kindref="compound">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>= operator overloading function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>a reference to the rhs point. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a point to be assigned to the lhs. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Point.h" line="71" column="1" bodyfile="Point.cpp" bodystart="60" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="class_point_1a1a69a0a1dea189f07e044f6eb868937d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Point::operator==</definition>
        <argsstring>(const Point &amp;p)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_point" kindref="compound">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>== operator overloading function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>a reference to the rhs <ref refid="class_point" kindref="compound">Point</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the points are equal, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Point.h" line="78" column="1" bodyfile="Point.cpp" bodystart="80" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="class_point_1a9d0a9f62ffc7345f802085706101cd62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Point::operator&lt;</definition>
        <argsstring>(const Point &amp;p)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_point" kindref="compound">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>&lt; operator overloading function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>a reference to the rhs <ref refid="class_point" kindref="compound">Point</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the lhs point is less than the rhs point, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Point.h" line="85" column="1" bodyfile="Point.cpp" bodystart="95" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="class_point_1a4f99aacff8c681d1666213fef33b69ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_point" kindref="compound">Point</ref></type>
        <definition>Point Point::operator/</definition>
        <argsstring>(int m)</argsstring>
        <name>operator/</name>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>/ operator overloading function (<ref refid="class_point" kindref="compound">Point</ref> object with integer). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the integer by which all the values of the internal vector of the point are divided. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a point as the result of the division of the input point with the integer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Point.h" line="92" column="1" bodyfile="Point.cpp" bodystart="114" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_point_1a7cc71f8277ff5a921bab778f4200558f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Point::operator()</definition>
        <argsstring>(size_t index)</argsstring>
        <name>operator()</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>() Returns the value of the internal vector of the point that corresponds to the given index. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the value to be returned. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the point indexed by the input index. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Point.h" line="99" column="1" bodyfile="Point.cpp" bodystart="123" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_point_1ac1204531b317c36ba7cd0a2c2ca20859" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Point::printValuesToConsole</definition>
        <argsstring>()</argsstring>
        <name>printValuesToConsole</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints the values of the <ref refid="class_point" kindref="compound">Point</ref> in console. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Point.h" line="104" column="1" bodyfile="Point.cpp" bodystart="135" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_point_1acfe860d2ad9f538ac35e1007697b965c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Point::writeValuesToFile</definition>
        <argsstring>(std::ostream &amp;out)</argsstring>
        <name>writeValuesToFile</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes the values of the <ref refid="class_point" kindref="compound">Point</ref> in a file. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Point.h" line="109" column="1" bodyfile="Point.cpp" bodystart="143" bodyend="149"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Point.h" line="7" column="1" bodyfile="Point.h" bodystart="6" bodyend="110"/>
    <listofallmembers>
      <member refid="class_point_1adc21fb4804add5777f2a1774b024fea7" prot="public" virt="non-virtual"><scope>Point</scope><name>addValue</name></member>
      <member refid="class_point_1a1a104867c565a737ae4b090d17de94f5" prot="public" virt="non-virtual"><scope>Point</scope><name>changeValue</name></member>
      <member refid="class_point_1a70f96664692429af8c591eac51e65faa" prot="public" virt="non-virtual"><scope>Point</scope><name>getID</name></member>
      <member refid="class_point_1a1db9dc500c5972dfb3e5c2c58e8dea8e" prot="private" virt="non-virtual"><scope>Point</scope><name>ID</name></member>
      <member refid="class_point_1a7cc71f8277ff5a921bab778f4200558f" prot="public" virt="non-virtual"><scope>Point</scope><name>operator()</name></member>
      <member refid="class_point_1a84ede377561c9e12fd4624ce79dee52e" prot="public" virt="non-virtual"><scope>Point</scope><name>operator+</name></member>
      <member refid="class_point_1a4f99aacff8c681d1666213fef33b69ea" prot="public" virt="non-virtual"><scope>Point</scope><name>operator/</name></member>
      <member refid="class_point_1a9d0a9f62ffc7345f802085706101cd62" prot="public" virt="non-virtual"><scope>Point</scope><name>operator&lt;</name></member>
      <member refid="class_point_1a1abb26c14e145a8b4782a30b821dd19e" prot="public" virt="non-virtual"><scope>Point</scope><name>operator=</name></member>
      <member refid="class_point_1a1a69a0a1dea189f07e044f6eb868937d" prot="public" virt="non-virtual"><scope>Point</scope><name>operator==</name></member>
      <member refid="class_point_1ad92f2337b839a94ce97dcdb439b4325a" prot="public" virt="non-virtual"><scope>Point</scope><name>Point</name></member>
      <member refid="class_point_1ac1204531b317c36ba7cd0a2c2ca20859" prot="public" virt="non-virtual"><scope>Point</scope><name>printValuesToConsole</name></member>
      <member refid="class_point_1aac952f18d9bf4cac6e71e487bf0a6485" prot="public" virt="non-virtual"><scope>Point</scope><name>setID</name></member>
      <member refid="class_point_1a8b0689db3397d2822086d7c9c8388e52" prot="public" virt="non-virtual"><scope>Point</scope><name>size</name></member>
      <member refid="class_point_1aab1a36388e8cf732ac39bfc3be14decf" prot="private" virt="non-virtual"><scope>Point</scope><name>v</name></member>
      <member refid="class_point_1a9dbaa711812c795591f242761ae49260" prot="public" virt="non-virtual"><scope>Point</scope><name>values</name></member>
      <member refid="class_point_1acfe860d2ad9f538ac35e1007697b965c" prot="public" virt="non-virtual"><scope>Point</scope><name>writeValuesToFile</name></member>
      <member refid="class_point_1a395fa04b4ec126b66fc053f829a30cc1" prot="public" virt="non-virtual"><scope>Point</scope><name>~Point</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
