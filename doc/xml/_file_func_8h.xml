<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_file_func_8h" kind="file" language="C++">
    <compoundname>FileFunc.h</compoundname>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="71">
        <label>FileFunc.h</label>
        <link refid="_file_func_8h"/>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceflnc">flnc</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_file_func_8h_1ac7d0feb122d3a455f1a91ba26b3de612" prot="public" static="no">
        <type>std::basic_istream&lt; char, std::char_traits&lt; char &gt; &gt;</type>
        <definition>typedef std::basic_istream&lt;char,std::char_traits&lt;char&gt; &gt; minput_stream</definition>
        <argsstring></argsstring>
        <name>minput_stream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FileFunc.h" line="5" column="1" bodyfile="FileFunc.h" bodystart="5" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_file_func_8h_1adf5ef842b05a918896d7eb7755bbee56" prot="public" static="no">
        <type>std::basic_ostream&lt; char, std::char_traits&lt; char &gt; &gt;</type>
        <definition>typedef std::basic_ostream&lt;char,std::char_traits&lt;char&gt; &gt; moutput_stream</definition>
        <argsstring></argsstring>
        <name>moutput_stream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FileFunc.h" line="6" column="1" bodyfile="FileFunc.h" bodystart="6" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>FLNC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLNC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="_file_func_8h_1ac7d0feb122d3a455f1a91ba26b3de612" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::basic_istream&lt;char,std::char_traits&lt;char&gt;&gt;<sp/><ref refid="_file_func_8h_1ac7d0feb122d3a455f1a91ba26b3de612" kindref="member">minput_stream</ref>;</highlight></codeline>
<codeline lineno="6" refid="_file_func_8h_1adf5ef842b05a918896d7eb7755bbee56" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::basic_ostream&lt;char,std::char_traits&lt;char&gt;&gt;<sp/><ref refid="_file_func_8h_1adf5ef842b05a918896d7eb7755bbee56" kindref="member">moutput_stream</ref>;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="namespaceflnc" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceflnc" kindref="compound">flnc</ref></highlight></codeline>
<codeline lineno="9"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="20" refid="namespaceflnc_1aa6a517635283780c9142bf6ad194013e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TYPE&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceflnc_1aa6a517635283780c9142bf6ad194013e" kindref="member">WriteVectorToFile</ref>(<ref refid="_file_func_8h_1adf5ef842b05a918896d7eb7755bbee56" kindref="member">moutput_stream</ref><sp/>*TrainingFileOut,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TYPE&gt;&amp;<sp/>vec){</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*TrainingFileOut)<sp/>&lt;&lt;<sp/>vec.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>vec.size();<sp/>j++)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*TrainingFileOut)<sp/>&lt;&lt;<sp/>(vec[j]<sp/>&lt;<sp/>0.000000001f<sp/>?<sp/>0<sp/>:<sp/>vec[j])<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*TrainingFileOut)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="namespaceflnc_1a5ee4b13fe9860b1398a2e2c8d07776c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TYPE&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceflnc_1a5ee4b13fe9860b1398a2e2c8d07776c8" kindref="member">Write2DVectorToFile</ref>(<ref refid="_file_func_8h_1adf5ef842b05a918896d7eb7755bbee56" kindref="member">moutput_stream</ref><sp/>*TrainingFileOut,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>std::vector&lt;TYPE&gt;<sp/>&gt;&amp;<sp/>vec){</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*TrainingFileOut)<sp/>&lt;&lt;<sp/>vec.size();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*TrainingFileOut)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec.size();<sp/>i++)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflnc_1aa6a517635283780c9142bf6ad194013e" kindref="member">WriteVectorToFile</ref>(TrainingFileOut,<sp/>vec[i]);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="namespaceflnc_1a51e2434fe14f26a9d979282b2d6524f5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TYPE&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceflnc_1a51e2434fe14f26a9d979282b2d6524f5" kindref="member">ReadVectorFromFile</ref>(<ref refid="_file_func_8h_1ac7d0feb122d3a455f1a91ba26b3de612" kindref="member">minput_stream</ref><sp/>*TrainingFileIn,<sp/>std::vector&lt;TYPE&gt;&amp;<sp/>vec){</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vecSize;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*TrainingFileIn)<sp/>&gt;&gt;<sp/>vecSize;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec.resize(vecSize);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>vecSize;<sp/>j++)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*TrainingFileIn)<sp/>&gt;&gt;<sp/>vec[j];</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="namespaceflnc_1a43f11ba9f2a94bcf4e8680f806a54a47" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TYPE&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceflnc_1a43f11ba9f2a94bcf4e8680f806a54a47" kindref="member">Read2DVectorFromFile</ref>(<ref refid="_file_func_8h_1ac7d0feb122d3a455f1a91ba26b3de612" kindref="member">minput_stream</ref><sp/>*TrainingFileIn,<sp/>std::vector&lt;<sp/>std::vector&lt;TYPE&gt;<sp/>&gt;&amp;<sp/>vec){</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vecSize;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*TrainingFileIn)<sp/>&gt;&gt;<sp/>vecSize;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec.resize(vecSize);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vecSize;<sp/>i++)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceflnc_1a51e2434fe14f26a9d979282b2d6524f5" kindref="member">ReadVectorFromFile</ref>(TrainingFileIn,<sp/>vec[i]);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/><sp/>FLNC_H</highlight></codeline>
    </programlisting>
    <location file="FileFunc.h"/>
  </compounddef>
</doxygen>
